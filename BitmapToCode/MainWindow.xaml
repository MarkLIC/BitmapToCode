<!--
Copyright 2011 Mark Rushakoff, Lafayette Instrument Company. All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are
permitted provided that the following conditions are met:

   1. Redistributions of source code must retain the above copyright notice, this list of
      conditions and the following disclaimer.

   2. Redistributions in binary form must reproduce the above copyright notice, this list
      of conditions and the following disclaimer in the documentation and/or other materials
      provided with the distribution.

THIS SOFTWARE IS PROVIDED BY Mark Rushakoff, Lafayette Instrument Company ''AS IS'' AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

The views and conclusions contained in the software and documentation are those of the
authors and should not be interpreted as representing official policies, either expressed
or implied, of Mark Rushakoff, Lafayette Instrument Company.
-->


<Window x:Class="BitmapToCode.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:xtoolkit="clr-namespace:Microsoft.Windows.Controls;assembly=WPFToolkit.Extended"
        xmlns:local="clr-namespace:BitmapToCode"
        Title="Bitmap to Code" Height="450" Width="550">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="8*" MinHeight="55"/>
            <RowDefinition Height="3"/>
            <RowDefinition Height="2*" MinHeight="55"/>
            <RowDefinition Height="3"/>
            <RowDefinition Height="4*" MinHeight="55"/>
        </Grid.RowDefinitions>
        <ScrollViewer Grid.Row="0" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto">
            <local:CellCollection
                x:Name="cellCollection" x:FieldModifier="private"
                NumRows="{Binding ElementName=nudRows, Path=Value, Converter={x:Static local:MainWindow.NullableIntToUintConverter}}"
                NumColumns="{Binding ElementName=nudColumns, Path=Value, Converter={x:Static local:MainWindow.NullableIntToUintConverter}}"
                CellDimension="{Binding ElementName=nudCellWidth, Path=Value, Converter={x:Static local:MainWindow.NullableIntToUintConverter}}"
                />
        </ScrollViewer>
        <GridSplitter
            Grid.Row="1"
            Width="Auto"
            Height="3"
            VerticalAlignment="Center"
            HorizontalAlignment="Stretch"/>
        <StackPanel Orientation="Vertical" Grid.Row="2">
            <WrapPanel Orientation="Horizontal">
                <StackPanel Orientation="Horizontal">
                    <Label Content="Rows: "/>
                    <xtoolkit:IntegerUpDown
                        x:Name="nudRows" x:FieldModifier="private"
                        Margin="0,0,20,0"
                        Value="32"
                        Minimum="1" Maximum="1000"/>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <Label Content="Columns: "/>
                    <xtoolkit:IntegerUpDown
                        x:Name="nudColumns" x:FieldModifier="private"
                        Margin="0,0,20,0"
                        Value="64"
                        Minimum="1" Maximum="1000"/>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <Label Content="Cell length: "/>
                    <xtoolkit:IntegerUpDown
                        x:Name="nudCellWidth" x:FieldModifier="private"
                        Value="7"
                        Margin="0,0,20,0"
                        Minimum="2" Maximum="250"/>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <Label Content="Border color: "/>
                    <xtoolkit:ColorPicker
                        x:Name="colorPickerBorder" x:FieldModifier="private"
                        SelectedColor="#FF93C8C8"
                        SelectedColorChanged="BorderColorChanged"
                        Width="45"/>
                </StackPanel>
            </WrapPanel>
            <WrapPanel Orientation="Horizontal">
                <Button Content="Clear All" Margin="10,2" Command="{Binding ElementName=cellCollection, Path=ClearCommand}"/>
                <Button Content="Invert All" Margin="10,2" Command="{Binding ElementName=cellCollection, Path=InvertCommand}"/>
                <Button Content="Dump" Margin="10,2" Click="Dump"/>
            </WrapPanel>
        </StackPanel>
        <GridSplitter
            Grid.Row="3"
            Width="Auto"
            Height="3"
            VerticalAlignment="Center"
            HorizontalAlignment="Stretch"/>
        <Grid HorizontalAlignment="Stretch" Grid.Row="4">
            <Grid.RowDefinitions>
                <RowDefinition />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="1*"/>
                <ColumnDefinition Width="3"/>
                <ColumnDefinition Width="1*"/>
            </Grid.ColumnDefinitions>
            <DockPanel>
                <TextBlock Text="Code" DockPanel.Dock="Top"/>
                <DockPanel Width="{Binding ElementName=textBoxCode, Path=ActualWidth}" DockPanel.Dock="Bottom" LastChildFill="False">
                    <Button
                        Content="Execute"
                        Click="ExecuteScript"
                        DockPanel.Dock="Right"
                        Margin="3"/>
                    <Button
                        Content="Help"
                        Click="ShowHelp"
                        DockPanel.Dock="Left"
                        Margin="3"/>
                    <TextBlock Text="Load presets:" VerticalAlignment="Center" Margin="3"/>
                    <ComboBox
                        ItemsSource="{Binding Source={x:Static local:CodePresets.PresetKeys}}"
                        SelectedIndex="0"
                        VerticalContentAlignment="Center"
                        SelectionChanged="ComboSelectionChanged"/>
                </DockPanel>
                <TextBox
                    x:Name="textBoxCode"
                    KeyDown="CodeKeyDown"
                    FontFamily="Courier New"
                    TextWrapping="Wrap"
                    VerticalScrollBarVisibility="Visible"
                    AcceptsReturn="True"
                    AcceptsTab="True"
                    HorizontalAlignment="Stretch"/>
            </DockPanel>
            <GridSplitter
                Grid.Column="1"
                Height="Auto"
                Width="3"
                HorizontalAlignment="Center"
                VerticalAlignment="Stretch"/>
            <DockPanel Grid.Column="2">
                <TextBlock Text="Console" DockPanel.Dock="Top"/>
                <TextBox
                    x:Name="textBoxConsole"
                    FontFamily="Courier New"
                    IsReadOnly="True"
                    TextWrapping="Wrap"
                    VerticalScrollBarVisibility="Visible"
                    AcceptsReturn="True"
                    HorizontalAlignment="Stretch"/>
            </DockPanel>
        </Grid>
    </Grid>
</Window>
